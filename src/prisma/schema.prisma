generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URI")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
  ownedConversations Conversation[]
}


model ConversationParticipant {
  id             String    @id @default(cuid())
  user  User  @relation(fields: [userId], references: [id])
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  userId String 
  messages Message[]
  lastSeenDate DateTime @default(now())
}

model Conversation {
  id             String    @id @default(cuid())
  ownerId String
  owner User @relation(fields: [ownerId], references: [id])
  participants ConversationParticipant[]
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  text String
  conversationId String
  participantId String
  dateSent DateTime
  conversation Conversation @relation(fields: [conversationId], references: [id])
  participant ConversationParticipant @relation(fields: [participantId], references: [id])
}

model TaskList {
  id String @id @default(cuid())
  title String
  conversationId String
  dateCreated DateTime
  tasks Task[] 
  index Int @default(999999999)
}

model Task {
  id String @id @default(cuid())
  title String
  taskListId String
  dateCreated DateTime
  taskList TaskList @relation(fields: [taskListId], references: [id])
  index Int @default(999999999)
}